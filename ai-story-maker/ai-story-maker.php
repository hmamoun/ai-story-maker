<?php
/*
Plugin Name: AI Story Maker
Plugin URI: https://github.com/hmamoun/ai-story-maker/wiki
Description: AI-powered content generator for WordPress — create engaging stories with a single click.
Version: 0.1.0
Author: Hayan Mamoun
Author URI: https://exedotcom.ca
License: GPLv2 or later
License URI: https://www.gnu.org/licenses/gpl-2.0.html
Text Domain: ai-story-maker
Domain Path: /languages
Requires PHP: 7.4
Requires at least: 5.8
Tested up to: 6.7
*/

namespace exedotcom\aistorymaker;
if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

define( 'AI_STORY_MAKER_PATH', plugin_dir_path( __FILE__ ) );
define( 'AI_STORY_MAKER_URL', plugin_dir_url( __FILE__ ) );
use exedotcom\aistorymaker\AISTMA_Story_Generator;
use exedotcom\aistorymaker\AISTMA_Log_Manager;

class AISTMA_Plugin {

    public function __construct() {
        add_action( 'init', array( $this, 'aistma_load_plugin_textdomain') );
        add_action( 'admin_enqueue_scripts', array( $this, 'aistma_enqueue_admin_styles' ) );
        add_filter( 'template_include', array( $this, 'aistma_template_include_filter' ) );
        $this->aistma_load_dependencies([
            'admin/class-ai-story-maker-admin.php',
            'includes/class-ai-story-maker-story-generator.php',
            'includes/story-scroller.php',
            'includes/class-ai-story-maker-log-management.php'
        ]
        );

    }

    public static function aistma_load_dependencies($files = []) {
        foreach ( $files as $file ) {
            $path = AI_STORY_MAKER_PATH . $file;
            if ( file_exists( $path ) ) {
                include_once $path;
            } else {
                if ( class_exists( 'exedotcom\aistorymaker\AISTMA_Log_Manager' ) ) {
                    $log_manager = new AISTMA_Log_Manager();
                    $log_manager->log( "Missing dependency file: $path" );
                } else {
                    error_log( "Missing dependency file: $path" ); // this will be used in case the log manager is not available
                }
            }
        }
    }

    /**
     * Load the plugin text domain for translations.
     */
    function aistma_load_plugin_textdomain() {
        load_plugin_textdomain( 'ai-story-maker', false, dirname( plugin_basename( __FILE__ ) ) . '/languages' ); 
    }


    /**
     * Enqueue admin styles only on the plugin settings page.
     *
     * @param string $hook The current admin page hook.
     */
    public function aistma_enqueue_admin_styles( $hook ) {
        if ( $hook !== 'toplevel_page_story-maker-settings' ) {
            return;
        }
        wp_enqueue_style(
            'ai-storymaker-admin-css',
            AI_STORY_MAKER_URL . 'admin/css/admin.css',
            array(),
            '1.0'
        );
    }

    /**
     * Filter the template used for single posts.
     *
     * @param string $template The path to the template.
     * @return string The modified template path.
     */
    function aistma_template_include_filter( $template ) {
        if ( is_single() ) {
            $post_id = get_the_ID();
            // Check if this post was generated by AI Story Maker by verifying if the request ID meta exists.
            if ( get_post_meta( $post_id, 'ai_story_maker_request_id', true ) ) {
                $plugin_template = AI_STORY_MAKER_PATH . '/public/single-ai-story.php';
                if ( file_exists( $plugin_template ) ) {
                    return $plugin_template;
                }
            }
        }
        return $template;
    }

    /**
     * Activation callback to create necessary log tables or other setup.
     */
    public static function aistma_activate() {
        $aistma_log_manager = new AISTMA_Log_Manager();
        if ( function_exists( 'ai_storymaker_create_log_table' ) ) {
            ai_storymaker_create_log_table();
        }
        
        // bmark Schedule on activation
        // Check if the schedule is already set; if not, set it.
        if ( ! wp_next_scheduled( 'aistima_generate_story_event' ) ) {
            $n = absint(get_option('opt_ai_story_repeat_interval_days'));
            if (0 !== $n) {
                // Schedule the event
                $next_schedule = gmdate('Y-m-d H:i:s', time() + $n * DAY_IN_SECONDS);
                wp_schedule_event(time() + $n * DAY_IN_SECONDS, 'daily', 'aistima_generate_story_event');
                // Log the next schedule
                /* translators: %s: next schedule */

                $aistma_log_manager->log('info', sprintf(__('Set next schedule to %s' , 'ai-story-maker'), $next_schedule));

            }
        }

    }

    /**
     * Deactivation callback to clear scheduled events and transients.
     */
    public static function aistma_deactivate() {
        // Clear the scheduled event
        wp_clear_scheduled_hook( 'aistima_generate_story_event' );
        // Clear the transient to stop the generation process
        delete_transient( 'ai_story_generator_running' );
    }
}

// Instantiate the main plugin class.
new AISTMA_Plugin();



// Register activation hook using the Plugin's static method.
register_activation_hook( __FILE__, array( 'exedotcom\aistorymaker\AISTMA_Plugin', 'aistma_activate' ) );

// Register deactivation hook to clear scheduled events.
register_deactivation_hook( __FILE__, array( 'exedotcom\aistorymaker\AISTMA_Plugin', 'aistma_deactivate' ) );


/**
 * AJAX action to generate an AI story.
 */
add_action( 'wp_ajax_generate_ai_stories', function() {
    if ( ! check_ajax_referer( 'generate_story_nonce', 'nonce', false ) ) {
        wp_send_json_error( [ 'message' => 'Security check failed.' ] );
    }

    if ( ! current_user_can( 'edit_posts' ) ) {
        wp_send_json_error( [ 'message' => 'You do not have permission to perform this action.' ] );
    }

    try {
        $story_generator = new \exedotcom\aistorymaker\AISTMA_Story_Generator();
        $results = $story_generator->generate_ai_stories_with_lock( true ); // ✅ force = true

        if ( ! empty( $results['errors'] ) ) {
            wp_send_json_error( $results['errors'] );
        } else {
            wp_send_json_success( $results['successes'] );
        }

    } catch ( \Throwable $e ) {
        wp_send_json_error( [ 'message' => 'Fatal error: ' . $e->getMessage() ] );
    }
});

/*
 * Change the wp-cron behavior for development environments.
 */
if ( defined( 'WP_ENV' ) && WP_ENV === 'exedotcom-development' ) {
    define('ALTERNATE_WP_CRON', true);
}
// Register cron callback — MUST be global, not inside constructor
add_action( 'aistima_generate_story_event', __NAMESPACE__ . '\\aistma_handle_generate_story_event' );

function aistma_handle_generate_story_event() {
    $generator = new AISTMA_Story_Generator();
    $generator->generate_ai_stories_with_lock();
}


